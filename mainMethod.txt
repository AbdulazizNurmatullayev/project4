package lesson2.homework;

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class RaceCondition {
    public static final Object object = new Object();
    public static Lock lock = new ReentrantLock();
    public static int count = 0;

    public static void main(String[] args) throws InterruptedException {
        for (int i = 0; i < 300; i++) {
            //   Runnable task = () ->countIncrease();
            //Runnable task = () -> countIncreaseWithLocker();
            // Runnable task = () ->countIncreaseWithSync();
            Runnable task = () -> countIncreaseWithSyncBlock();
            Thread thread = new Thread(task);
            thread.start();
        }

        Thread.sleep(7000);
        System.out.println("count: " + count);


        RaceCondition raceCondition = new RaceCondition();
        raceCondition.countIncreaseWithSyncInstance();
        System.out.println(raceCondition);
    }